<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Certified Kubernetes Application Developer (CKAD) on </title>
    <link>http://learn.aayushtuladhar.com/kubernetes/ckad/</link>
    <description>Recent content in Certified Kubernetes Application Developer (CKAD) on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://learn.aayushtuladhar.com/kubernetes/ckad/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>01 - Setting up Kubernetes Cluster</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/01_setting_up_k8_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/01_setting_up_k8_cluster/</guid>
      <description>Using Ubuntu Distribution (Ubuntu Xenial LTS 16.04) as Base Image for the Virtual Machine. We will be building a Kubernetes Cluster
Setup Docker and Kubernetes Repositories curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable&amp;quot; curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - cat &amp;lt;&amp;lt; EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF  Install Docker, Kubelet, KubeAdm and KubeCtl sudo apt-get update sudo apt-get install -y docker-ce=18.</description>
    </item>
    
    <item>
      <title>02 - Core Concepts</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/02_core_concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/02_core_concepts/</guid>
      <description>Kubernetes API Primitives Pods Namespaces Basic Container Configuration  Kubernetes API Primitives Kubernetes API Primitives are also called Kubernetes Objects. These are data objects that represent the state of the cluster. Example of Kubernetes Objects:
 Pod Node Service Service Account  The kubectl api-resource command will list the object types currently available to the cluster.
Every object has a spec and status:
 Spec - You provide the spec.</description>
    </item>
    
    <item>
      <title>03 - Configuration</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/03_configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/03_configuration/</guid>
      <description>ConfigMaps SecurityContexts Resource Requirements Secrets Service Accounts   ConfigMaps A ConfigMap is a Kubernetes Object that stores configuration data in a key-value format. This configuration data can then be used to configure software running in a container, by referencing the ConfigMap in the Pod spec.
myconfigmap.yml
apiVersion: v1 kind: ConfigMap metadata: name: my-config-map data: myKey: myValue anotherKey: anotherValue  Passing ConfigMap data to a pod&amp;rsquo;s container as an environment variable:</description>
    </item>
    
    <item>
      <title>04 - Multi Container Pods</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/04_multi_container_pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/04_multi_container_pods/</guid>
      <description>Multi-container pods are simply pods with more than one container that all work together as a single unit.
It is often a good idea to keep containers separate by keeping them in their own separate pods, but there are several cases where multi-container pods can be beneficial.
You can create multi-container pods by listing multiple containers in the pod definition.
apiVersion: v1 kind: Pod metadata: name: multi-container-pod spec: containers: - name: nginx image: nginx:1.</description>
    </item>
    
    <item>
      <title>05 - Observability</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/05_observability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/05_observability/</guid>
      <description>Liveness and Readiness Probes  Liveness probe Readiness Probe  Container Logging Installing Metrics Server Monitoring Applications Debugging  Liveness and Readiness Probes Probes - Allow you to customize how Kubernetes determines the status of your containers
Liveness probe Indicates whether the container is running properly, and governs whether the cluster will automatically stop or restart the container. Liveness probes can be created by including them in the container spec.</description>
    </item>
    
    <item>
      <title>06 - Pod Design</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/06_pod-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/06_pod-design/</guid>
      <description>Labels, Selectors, and Annotations Deployments Rolling Updates and Rollbacks  Rolling Updates and Rollbacks  Jobs and CronJobs  Labels, Selectors, and Annotations Labels are key-value pairs attached to Kubernetes objects. They are used for identifying various attributes of objects which can in turn be used to select and group various subsets of those objects.
We can attach labels to objects by listing them in the metadata.labels section of an object descriptor.</description>
    </item>
    
    <item>
      <title>Lab 6 - Rolling Updates with Kubernetes Deployments</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab6-rolling-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab6-rolling-updates/</guid>
      <description> candy-deployment Deployment descriptor apiVersion: extensions/v1beta1 kind: Deployment metadata: annotations: deployment.kubernetes.io/revision: &amp;quot;1&amp;quot; kubectl.kubernetes.io/last-applied-configuration: | {&amp;quot;apiVersion&amp;quot;:&amp;quot;apps/v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Deployment&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;candy-deployment&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;default&amp;quot;},&amp;quot;spec&amp;quot;:{&amp;quot;replicas&amp;quot;:2,&amp;quot;selector&amp;quot;:{&amp;quot;matchLabels&amp;quot;:{&amp;quot;app&amp;quot;:&amp;quot;candy-ws&amp;quot;}},&amp;quot;template&amp;quot;:{&amp;quot;metadata&amp;quot;:{&amp;quot;labels&amp;quot;:{&amp;quot;app&amp;quot;:&amp;quot;candy-ws&amp;quot;}},&amp;quot;spec&amp;quot;:{&amp;quot;containers&amp;quot;:[{&amp;quot;image&amp;quot;:&amp;quot;linuxacademycontent/candy-service:2&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;candy-ws&amp;quot;}]}}}} creationTimestamp: null generation: 1 name: candy-deployment selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/candy-deployment spec: progressDeadlineSeconds: 600 replicas: 2 revisionHistoryLimit: 10 selector: matchLabels: app: candy-ws strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 25% type: RollingUpdate template: metadata: creationTimestamp: null labels: app: candy-ws spec: containers: - image: linuxacademycontent/candy-service:2 imagePullPolicy: IfNotPresent name: candy-ws resources: {} terminationMessagePath: /dev/termination-log terminationMessagePolicy: File dnsPolicy: ClusterFirst restartPolicy: Always schedulerName: default-scheduler securityContext: {} terminationGracePeriodSeconds: 30  Updating to New Image # Setting New Image for Deployment kubectl set image deployment/candy-deployment candy-ws=linuxacademycontent/candy-service:3 --record # Performing Rollout kubectl rollout status deployment/candy-deployment  Performing RollBack kubectl rollout history deployment/candy-deployment kubectl rollout undo deployment/candy-deployment  </description>
    </item>
    
    <item>
      <title>Lab 7 - Configuring Cron Jobs in Kubernetes</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab7-cronjobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab7-cronjobs/</guid>
      <description>cleanup-cronjob.yml
apiVersion: batch/v1beta1 kind: CronJob metadata: name: cleanup-cronjob spec: schedule: &amp;quot;*/1 * * * *&amp;quot; jobTemplate: spec: template: spec: containers: - name: hello image: linuxacademycontent/data-cleanup:1 restartPolicy: OnFailure  </description>
    </item>
    
    <item>
      <title>Lab1 - Creating Kubernetes Pod</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab1-creating-kubernetes-pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab1-creating-kubernetes-pods/</guid>
      <description>nginx.yml
apiVersion: v1 kind: Pod metadata: name: nginx namespace: web spec: containers: - name: nginx image: nginx command: [&#39;nginx&#39;] args: [&#39;-g&#39;, &#39;daemon off;&#39;, &#39;-q&#39;] ports: - containerPort: 80  ## Applying Spec Definition for Creating Pod kubectl -n web apply -f nginx.yml ## Verifying Pod running in web namespace kubectl get pods -n web  </description>
    </item>
    
    <item>
      <title>Lab2 - Configuring Kubernetes Pod</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab2-configuring-kubernetes-pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab2-configuring-kubernetes-pods/</guid>
      <description> Create a ConfigMap called candy-service-config to store the container&amp;rsquo;s configuration data. candy-service-config.yml
apiVersion: v1 kind: ConfigMap metadata: name: candy-service-config data: candy.cfg: |- candy.peppermint.power: 100000000 candy.nougat-armor.strength: 10  Create a Kubernetes secret called db-password to store the database password. candy-service-secret.yml
apiVersion: v1 kind: Secret metadata: name: db-password stringData: db-password: Kub3rn3t3sRul3s!  Create the pod for the candy-service application according to the provided specification. candy-service-pod.yml
apiVersion: v1 kind: Pod metadata: name: candy-service spec: securityContext: fsGroup: 2000 containers: - name: candy-service image: linuxacademycontent/candy-service:1 volumeMounts: - name: candy-service-volume mountPath: /etc/candy-service env: - name: DB_PASSWORD valueFrom: secretKeyRef: name: db-password key: db-password resources: requests: memory: &amp;quot;64Mi&amp;quot; cpu: &amp;quot;250m&amp;quot; limits: memory: &amp;quot;128Mi&amp;quot; cpu: &amp;quot;500m&amp;quot; volumes: - name: candy-service-volume configMap: name: candy-service-config  </description>
    </item>
    
    <item>
      <title>Lab3 - Forwarding Port Traffic with an Ambassador Container</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab3-forwarding-port-traffic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab3-forwarding-port-traffic/</guid>
      <description>fruit-service-ambassador-config.yml
# Config Map for HA Proxy apiVersion: v1 kind: ConfigMap metadata: name: fruit-service-ambassador-config data: haproxy.cfg: |- global daemon maxconn 256 defaults mode http timeout connect 5000ms timeout client 50000ms timeout server 50000ms listen http-in bind *:80 server server1 127.0.0.1:8775 maxconn 32  fruit-service-pod.yml
# Pod Definition for fruit-service apiVersion: v1 kind: Pod metadata: name: fruit-service spec: containers: - name: fruit-service-container image: linuxacademycontent/legacy-fruit-service:1 - name: fruit-service-ambassador image: haproxy:1.7 ports: - containerPort: 80 volumeMounts: - name: config-volume mountPath: /usr/local/etc/haproxy volumes: - name: config-volume configMap: name: fruit-service-ambassador-config  busybox.</description>
    </item>
    
    <item>
      <title>Lab4 - Configuring Probes for a Kubernetes Pod</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab4-configuring-probes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab4-configuring-probes/</guid>
      <description>candy-service-pod.yml
apiVersion: v1 kind: Pod metadata: name: candy-service spec: containers: - name: candy-service image: linuxacademycontent/candy-service:2 livenessProbe: httpGet: path: /healthz port: 8081 readinessProbe: httpGet: path: / port: 80  </description>
    </item>
    
    <item>
      <title>Lab5 - Debugging Kubernetes</title>
      <link>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab5-debugging-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/kubernetes/ckad/labs/lab5-debugging-kubernetes/</guid>
      <description> Identify the Problem kubectl get pods --all-namespaces  Get the Broken Pods&amp;rsquo;s Container Logs kubectl logs cart-ws -n candy-store  Fix the Problem # Save the Pod Descriptor of Broken Pod kubectl get pod &amp;lt;pod name&amp;gt; -n &amp;lt;namespace&amp;gt; -o yaml --export &amp;gt; broken-pod.yml # Delete Broken Pod kubectl delete pod &amp;lt;pod name&amp;gt; -n &amp;lt;namespace&amp;gt; # Recreate Broken Pod kubectl apply -f broken-pod.yml -n &amp;lt;namespace&amp;gt; # Verify Fix kubectl get pod &amp;lt;pod name&amp;gt; -n &amp;lt;namespace&amp;gt;  </description>
    </item>
    
  </channel>
</rss>