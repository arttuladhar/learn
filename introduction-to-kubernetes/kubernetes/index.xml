<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Always Learning; Always Improving</title>
    <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/</link>
    <description>Recent content in Kubernetes on Always Learning; Always Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>01 - Kubernetes Architecture</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/01_kubernetes-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/01_kubernetes-architecture/</guid>
      <description>At a very high level, Kubernetes has the following main components
 One ore more master nodes One or more worker nodes Distributed key-value store, such as etcd  Master Node The master node provides a running environment for the control plane responsible for managing the state of a Kubernetes cluster, and it is the brain behind all operations inside the cluster. The control plane components are agents with very distinct roles in the cluster&amp;rsquo;s management.</description>
    </item>
    
    <item>
      <title>02 - Installing Kubernetes</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/02_installing_kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/02_installing_kubernetes/</guid>
      <description>Local Installation On-Premise Installation Cloud Installation  All-in-One Single-Node Installation In this setup, all the master and worker components are installed and running on a single-node. While it is useful for learning, development, and testing, and it should not be used in production. Minikube is one such example, and we are going to explore it in future chapters.
Single-Node etcd, Single-Master and Multi-Worker Installation In this setup, we have a single-master node, which also runs a single-node etcd instance.</description>
    </item>
    
    <item>
      <title>03 - Minikube</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/03_minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/03_minikube/</guid>
      <description>Installing Minikube  Command Line Interface (CLI) tools and scripts Web-based User Interface (Web UI) from a web browser APIs from CLI or programmatically Kubectl Proxy   Installing Minikube # Install Minikube brew install minikube # Starting Minikube minikube start minikube start --vm-driver=xhyve minikube start --vm-driver=hyperkit minikube status minikube stop  Any healthy running Kubernetes cluster can be accessed via any one of the following methods:
Command Line Interface (CLI) tools and scripts kubectl is the Kubernetes Command Line Interface (CLI) client to manage cluster resources and applications.</description>
    </item>
    
    <item>
      <title>04 - Kubernetes Building Blocks</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/04_kubernetes_building_blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/04_kubernetes_building_blocks/</guid>
      <description>Kubernetes Object Model Pods  Labels  Replication Controller Replica Set Deployments Namespaces  Kubernetes Object Model With each object, we declare our intent or the desired state under the spec section. When creating an object, the object&amp;rsquo;s configuration data section from below the spec field has to be submitted to the Kubernetes API server.
Example of Deployment object configuration in YAML format.
apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.</description>
    </item>
    
    <item>
      <title>05 - Authentication, Authorization, and Admission Control</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/05_authorization_access_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/kubernetes/05_authorization_access_control/</guid>
      <description>To access and manage any Kubernetes resource or object in the cluster, we need to access a specific API endpoint on the API server. Each access request goes through the following three stages:
Authentication - Logs in a user Authorization - Authorizes the API requests added by the logged-in user. Admission Control - Software modules that can modify or reject the requests based on some additional checks, like a pre-set Quota.</description>
    </item>
    
  </channel>
</rss>