<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Digital Learning Notebook on Always Learning; Always Improving</title>
    <link>http://learn.aayushtuladhar.com/</link>
    <description>Recent content in Digital Learning Notebook on Always Learning; Always Improving</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://learn.aayushtuladhar.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>00 - Containers and Orchestration</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/00_containers_and_orchestration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/00_containers_and_orchestration/</guid>
      <description>Containers Microservices Container Orchestration  Container Orchestrators   Containers Containers are application-centric methods to deliver high-performing, scalable applications on any infrastructure of your choice. Containers are best suited to deliver microservices by providing portable, isolated virtual environments for applications to run without interference from other running applications.
Microservices Microservices are lightweight applications written in various modern programming languages, with specific dependencies, libraries and environmental requirements. To ensure that an application has everything it needs to run successfully it is packaged together with its dependencies.</description>
    </item>
    
    <item>
      <title>01 - Kubernetes Architecture</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/01_kubernetes-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/01_kubernetes-architecture/</guid>
      <description>Master Node  Master Node Components Master Node Components: API Server Master Node Components: Scheduler Master Node Componets: Controller Managers Master Node Components: etcd  Worker Node  Worker Node Components Worker Node Component: Container Runtime Worker Node Components: kubelet Worker Node Components: kube-proxy Worker Node Components: Addons  Networking Challenges  Container to Container Communication inside Pods Pod-to-Pod Communication Across Nodes Pod-to-External World Communication   At a very high level, Kubernetes has the following main components</description>
    </item>
    
    <item>
      <title>02 - Installing Kubernetes</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/02_installing_kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/02_installing_kubernetes/</guid>
      <description>Local Installation On-Premise Installation Cloud Installation  All-in-One Single-Node Installation In this setup, all the master and worker components are installed and running on a single-node. While it is useful for learning, development, and testing, and it should not be used in production. Minikube is one such example, and we are going to explore it in future chapters.
Single-Node etcd, Single-Master and Multi-Worker Installation In this setup, we have a single-master node, which also runs a single-node etcd instance.</description>
    </item>
    
    <item>
      <title>03 - Minikube</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/03_minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/03_minikube/</guid>
      <description>Installing Minikube  Command Line Interface (CLI) tools and scripts Web-based User Interface (Web UI) from a web browser APIs from CLI or programmatically Kubectl Proxy   Installing Minikube # Install Minikube brew install minikube # Starting Minikube minikube start minikube start --vm-driver=xhyve minikube start --vm-driver=hyperkit minikube status minikube stop  Any healthy running Kubernetes cluster can be accessed via any one of the following methods:
Command Line Interface (CLI) tools and scripts kubectl is the Kubernetes Command Line Interface (CLI) client to manage cluster resources and applications.</description>
    </item>
    
    <item>
      <title>04 - Kubernetes Building Blocks</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/04_kubernetes_building_blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/04_kubernetes_building_blocks/</guid>
      <description>Kubernetes Object Model Pods  Labels  Replication Controller Replica Set Deployments Namespaces  Kubernetes Object Model With each object, we declare our intent or the desired state under the spec section. When creating an object, the object&amp;rsquo;s configuration data section from below the spec field has to be submitted to the Kubernetes API server.
Example of Deployment object configuration in YAML format.
apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.</description>
    </item>
    
    <item>
      <title>05 - Authentication, Authorization, and Admission Control</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/05_authorization_access_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/05_authorization_access_control/</guid>
      <description>Authentication Authorization  Types of RoleBindings Admission Control  Demo - Authentication and Authorization  To access and manage any Kubernetes resource or object in the cluster, we need to access a specific API endpoint on the API server. Each access request goes through the following three stages:
 Authentication - Logs in a user Authorization - Authorizes the API requests added by the logged-in user. Admission Control - Software modules that can modify or reject the requests based on some additional checks, like a pre-set Quota.</description>
    </item>
    
    <item>
      <title>06 - Services</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/06_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/06_services/</guid>
      <description>Services Service Object Example kube-proxy Service Discovery Servie Type  Cluster IP NodePort LoadBalancer ExternalIP ExternalName   Services  An abstract way to expose an application running on a set of Pods as a network service. With Kubernetes you donâ€™t need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.</description>
    </item>
    
    <item>
      <title>07 - Deploying Standalone App</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/07_deploying_standalone_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/07_deploying_standalone_app/</guid>
      <description>Creating Deployment using YAML File Exposing Application Liveness and Readiness Probes  Liveness Probe Readiness Probe   Creating Deployment using YAML File webserver.yaml
apiVersion: apps/v1 kind: Deployment metadata: name: webserver labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:alpine ports: - containerPort: 80  kubectl create -f webserver.yaml  This will also create ReplicaSet and Pods as defined in the YAML configuration.</description>
    </item>
    
    <item>
      <title>08 - Kubernetes Volume Management</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/08_kubernetes_volume_management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/08_kubernetes_volume_management/</guid>
      <description>Volumes Volume Types PersistentVolumeClaims Using a Shared hostPath Volume Type  Volumes As we know, containers running in Pods are ephemeral in nature. All data stored inside a container is deleted if the container crashes. However, the kubelet will restart it with a clean slate, which means that it will not have any of the old data.
To overcome this problem, Kubernetes uses Volumes. A Volume is essentially a directory backed by a storage medium.</description>
    </item>
    
    <item>
      <title>09 - ConfigMaps and Secrets</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/09_configmaps_secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/09_configmaps_secrets/</guid>
      <description>ConfigMaps  Creating ConfigMaps Using CommandLine Using Configuration File Using Properties File Using ConfigMaps Inside Pods As Environment Variable As Volume  Secrets  Creating Secret Create a Secret from Literal and Display Its Details Create a Secret from YAML File Use Secrets Inside Pods   ConfigMaps ConfigMaps allow us to decouple the configuration details from the container image. Using ConfigMaps, we pass configuration data as key-value pairs, which are consumed by Pods or any other system components and controllers, in the form of environment variables, sets of commands and arguments, or volumes.</description>
    </item>
    
    <item>
      <title>10 - Ingress</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/10_ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/10_ingress/</guid>
      <description>With Services, routing rules are associated with a given Service. They exist for as long as the Service exists, and there are many rules because there are many Services in the cluster. If we can somehow decouple the routing rules from the application and centralize the rules management, we can then update our application without worrying about its external access. This can be done using the Ingress resource.
 An Ingress is a collection of rules that allow inbound connections to reach the cluster Services.</description>
    </item>
    
    <item>
      <title>11 - Advanced Topics</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/11_advanced_topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/11_advanced_topics/</guid>
      <description>Annotations With Annotations, we can attach arbitrary non-identifying metadata to any objects, in a key-value format:
&amp;quot;annotations&amp;quot;: { &amp;quot;key1&amp;quot; : &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot; : &amp;quot;value2&amp;quot; }  Unlike Labels, annotations are not used to identify and select objects. Annotations can be used to:
 Store build/release IDs, PR numbers, git branch, etc. Phone/pager numbers of people responsible, or directory entries specifying where such information can be found Pointers to logging, monitoring, analytics, audit repositories, debugging tools, etc.</description>
    </item>
    
    <item>
      <title>12 - Resources</title>
      <link>http://learn.aayushtuladhar.com/introduction-to-kubernetes/12_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/introduction-to-kubernetes/12_resources/</guid>
      <description> Labs CKA Curriculum   </description>
    </item>
    
    <item>
      <title>Arrow Functions</title>
      <link>http://learn.aayushtuladhar.com/javascript/es-6/arrowfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/javascript/es-6/arrowfunctions/</guid>
      <description>Arrow Function Express allows you to write shorter syntax than it&amp;rsquo;s predecessor Function expression. In addition and more exciting is how the new Arrow function bind their context.
(param1, param2, param3) =&amp;gt; { statements } singleParam =&amp;gt; { statements } () =&amp;gt; { statements }  Example var materials = [ &#39;Iron&#39;, &#39;Calcium&#39;, &#39;Sodium&#39;, &#39;Magnanese&#39; ] materials.map(material =&amp;gt; material.length)  An arrow function does not newly define its own this when it&amp;rsquo;s being executed.</description>
    </item>
    
    <item>
      <title>Basic Essentials</title>
      <link>http://learn.aayushtuladhar.com/google-cloud-platform/basic-essentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/google-cloud-platform/basic-essentials/</guid>
      <description>Creting Instance (Directly) # Create Compute Instance gcloud compute instances create gcelab2 --machine-type n1-standard-2 \ --zone us-central1-c  Using Instance Templates / Instance Groups # Create Instance Template gcloud compute instance-templates create nginx-template \ --metadata-from-file startup-script=startup.sh # Create Target Pool gcloud compute target-pools create nginx-pool # Create Instance Group gcloud compute instance-groups managed create nginx-group \ --base-instance-name nginx \ --size 2 \ --template nginx-template \ --target-pool nginx-pool # List Instances gcloud compute instances list  Create Filewall # Create Filewall rule to Allow 80 gcloud compute firewall-rules create www-firewall --allow tcp:80  SSH Instance gcloud compute ssh gcelab2 --zone us-central1-c   gcloud is a command-line tool for Google Cloud Platform</description>
    </item>
    
    <item>
      <title>Cloud Storage</title>
      <link>http://learn.aayushtuladhar.com/google-cloud-platform/cloud-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/google-cloud-platform/cloud-storage/</guid>
      <description> Create a Stoage Bucket gsutil mb gs://unique-name  </description>
    </item>
    
    <item>
      <title>Continuous Delivery with Jenkins in Kubernetes Engine</title>
      <link>http://learn.aayushtuladhar.com/google-cloud-platform/continuous-delivery-with-jenkins-in-kubernetes-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/google-cloud-platform/continuous-delivery-with-jenkins-in-kubernetes-engine/</guid>
      <description># Create Kubernetes Cluster gcloud container clusters create jenkins-cd \ --num-nodes 2 \ --machine-type n1-standard-2 \ --scopes &amp;quot;https://www.googleapis.com/auth/projecthosting,cloud-platform&amp;quot; # Update KubeConfig with Cluster credentials gcloud container clusters get-credentials jenkins-cd # Verify Kubernetes can connect to GCP Kubernetes Cluster kubectl cluster-info  </description>
    </item>
    
    <item>
      <title>Destructuring JavaScript Objects</title>
      <link>http://learn.aayushtuladhar.com/javascript/es-6/destructuring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/javascript/es-6/destructuring/</guid>
      <description>const person = { firstName: &#39;Aayush&#39;, lastName: &#39;Tuladhar&#39;, country: &#39;Nepal&#39;, twitter: &#39;@aayushtuladhar&#39; } /* Problem */ const first = person.firstName; const last = person.lastName; console.log(`Hello ${first} ${last}`); /* Solution */ const { firstName, lastName } = person; console.log(`Hello ${firstName} ${lastName}`); /* ------------------ */ const art = { first: &#39;ART&#39;, last: &#39;Ratna&#39;, links: { social: { twitter: &#39;https://twitter.com/aayushtuladhar&#39;, facebook: &#39;https://facebook.com/aayush.tuladhar&#39;, }, web: { blog: &#39;https://aayushtuladhar.com&#39; } } }; const { twitter, facebook } = art.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://learn.aayushtuladhar.com/hugo-basics/basic_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/hugo-basics/basic_1/</guid>
      <description>Learning the Basics Stuff Starting Server hugo server -D  Documentation Learn</description>
    </item>
    
    <item>
      <title>Getting Started with Redux</title>
      <link>http://learn.aayushtuladhar.com/javascript/reactjs/redux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/javascript/reactjs/redux/</guid>
      <description>Redux gives you a store, and lets you keep state in it, and get state out, and respond when the state changes. But thatâ€™s all it does.
Itâ€™s actually react-redux that lets you connect pieces of the state to React components.
 The state is the data, and the store is where itâ€™s kept
 Redux Store Redux Reducer Reducer&amp;rsquo;s job is to take the current state and action and return the new state.</description>
    </item>
    
    <item>
      <title>Layouts</title>
      <link>http://learn.aayushtuladhar.com/hugo-basics/basic_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/hugo-basics/basic_2/</guid>
      <description>Headings # h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading  Renders to:
h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Typography I am just being Bold
I Love my Italics Style
Strike Through
 I love to give a quotation
 Images ![Minion](https://octodex.github.com/images/minion.png)  Resizing Images ![Minion](https://octodex.github.com/images/minion.png?width=20pc)  Buttons Get Grav  Note / Info/ Tip / Warning A notice disclaimer</description>
    </item>
    
    <item>
      <title>Network Concepts</title>
      <link>http://learn.aayushtuladhar.com/google-cloud-platform/network-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/google-cloud-platform/network-concepts/</guid>
      <description>Projects Projects are the outermost container and are used to group resources that share the same trust boundary. Many developers map Projects to teams since each Project has its own access policy (IAM) and member list. Projects also serve as a collector of billing and quota details reflecting resource consumption. Projects contain Networks which contain Subnetworks, Firewall rules, and Routes (see below architecture diagrams for illustration).
Networks Networks directly connect your resources to each other and to the outside world.</description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>http://learn.aayushtuladhar.com/devops/openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/devops/openshift/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Orchestrating Cloud with Kubernetes</title>
      <link>http://learn.aayushtuladhar.com/google-cloud-platform/orchestrating-cloud-with-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/google-cloud-platform/orchestrating-cloud-with-kubernetes/</guid>
      <description># Creating Kubernetes Cluster gcloud container clusters create io  Quick Demo # Create Deployment kubectl create deployment nginx --image=nginx:1.10.0 # List Pods kubectl get pods # Expose Deployment via a Service using LoadBalancer kubectl expose deployment nginx --port 80 --type LoadBalancer # List Service kubectl get services  Pods Pods are the smallest deployable units of computing that can be created and managed in Kubernetes. Pods represent and hold a collection of one or more containers.</description>
    </item>
    
    <item>
      <title>Teplate Literals</title>
      <link>http://learn.aayushtuladhar.com/javascript/template-literals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://learn.aayushtuladhar.com/javascript/template-literals/</guid>
      <description>Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.
const someText = `string text ${expression} string text`  </description>
    </item>
    
  </channel>
</rss>